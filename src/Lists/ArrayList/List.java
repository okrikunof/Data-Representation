package Lists.ArrayList;

import ListElement.ListElement;

/**
 * Класс Lists.ArrayList предназначен для работы со списком элементов, хранящихся в массиве
 */
public class List {

    private ListElement[] elements;  // Массив для хранения элементов списка
    private int last;                // Индекс первого свободного элемента

    /**
     * Конструктор для инициализации массива элементов с заданной емкостью.
     * Инициализация индекса last происходит с нуля, что означает, что список пуст.
     */
    public List() {
        elements = new ListElement[50];
        last = 0;
    }

    /**
     * Метод, возвращающий позицию последнего элемента.
     *
     * @return Возвращает позицию после последнего элемента, которая указывает на конец списка.
     */
    public Position End() {
        return new Position(last);
    }


    /**
     * Метод, вставляющий элемент в переданную позицию списка.
     * <p>
     * Сначала проверяем переданный индекс позиции на корректность.
     * Если индекс будет меньше 0 или больше last, то результат неопределен (вызываем return).
     * При удовлетворении индекса условиям, сдвигаем все элементы вправо в цикле, чтобы освободить место для нового элемента.
     * После сдвига добавляем в указанную позицию новый элемент, вызывая копирующий конструктор.
     *
     * @param x элемент, который нужно вставить
     * @param p позиция, на которую нужно вставить элемент
     */
    public void Insert(ListElement x, Position p) {
        // Проверяем корректность позиции
        if (p.position < 0 || p.position > last) {
            return;
        }

        // Сдвиг элементов вправо для освобождения места под новый элемент
        for (int i = last; i > p.position; i--) {
            elements[i] = elements[i - 1];
        }

        elements[p.position] = new ListElement(x);  // Вставляем элемент на нужную позицию
        last++;  // Увеличиваем размер списка
    }


    /**
     * Метод, ищущий элемент в списке и возвращающий его позицию.
     * <p>
     * В цикле мы просматриваем все элементы с первого до тех пор, пока не найдем переданный элемент или не дойдем до конца.
     * Вызывая метод Equals(ListElement x) класса ListElement, проверяем равенство элемента списка и переданного элемента.
     * Если объекта в списке нет, то возвращается позиция End().
     * Если несколько значений, совпадает со значением x, то возвращается первая позиция от начала.
     *
     * @param x элемент, который нужно найти
     * @return Индекс найденного элемента или индекс после последнего элемента, если элемент не найден
     */
    public Position Locate(ListElement x) {
        // Проходим по всем элементам и ищем совпадение
        for (int i = 0; i < last; i++) {
            if (elements[i].Equals(x)) {
                return new Position(i);  // Возвращаем позицию найденного элемента
            }
        }

        return new Position(last);  // Если элемент не найден, возвращаем позицию за последним элементом
    }


    /**
     * Метод, возвращающий элемент, находящийся в переданной позиции списка.
     * <p>
     * Сначала проверяем переданный индекс позиции на корректность.
     * Если индекс будет меньше 0 или больше или равен last, то выбрасываем RuntimeException.
     * При удовлетворении индекса условиям, возвращаем элемент по переданному индексу.
     *
     * @param p позиция элемента, который нужно вернуть
     * @return элемент на позиции p
     * @throws RuntimeException если позиция некорректна
     */
    public ListElement Retrieve(Position p) {
        // Проверяем корректность позиции
        if (p.position < 0 || p.position > last) {
            throw new RuntimeException("Invalid position");
        }

        return elements[p.position];  // Возвращаем элемент на позиции p
    }

    /**
     * Метод, удаляющий элемент на позиции p из списка.
     * <p>
     * Сначала проверяем переданный индекс позиции на корректность.
     * Если индекс будет меньше 0 или больше или равен last, то выбрасываем RuntimeException.
     * При удовлетворении индекса условиям в цикле смещаем элементы влево, чтобы убрать элемент из списка.
     * Далее уменьшаем размер списка.
     *
     * @param p позиция, элемент в которой необходимо удалить
     */
    public void Delete(Position p) {
        // Проверяем корректность позиции
        if (p.position < 0 || p.position >= last) {
            return;
        }

        // Сдвигаем элементы влево для заполнения пустого места
        for (int i = p.position; i < last - 1; i++) {
            elements[i] = elements[i + 1];
        }

        last--;  // Уменьшаем размер списка
    }


    /**
     * Метод, возвращающий элемент, находящийся на следующей позиции после p.
     * <p>
     * Сначала проверяем переданный индекс позиции на корректность.
     * Если индекс будет меньше 0 или больше или равен last, то выбрасываем RuntimeException.
     * Если индекс равен последнему элементу, то возвращаем End().
     * При удовлетворении индекса условиям возвращаем позицию после элемента, расположенного в p.
     *
     * @param p позиция, у которой надо вернуть следующую позицию
     * @return Позицию после элемента, расположенного в позиции после p в случае нахождения его в списке
     * End(), если позиция указывает на последний элемент
     * @throws RuntimeException если позиция некорректна
     */
    public Position Next(Position p) {
        // Проверяем корректность позиции
        if (last == 0 || p.position == last) {
            throw new RuntimeException("Invalid position");
        }

        return new Position(p.position + 1);  // Возвращаем элемент на следующей позиции
    }


    /**
     * Метод, возвращающий элемент, находящийся на предыдущей позиции перед p.
     * <p>
     * Сначала проверяем переданный индекс позиции на корректность.
     * Если индекс будет меньше или равен 0 или больше или равен last, то выбрасываем RuntimeException.
     * При удовлетворении индекса условиям возвращаем позицию перед элементом, расположенного в p.
     *
     * @param p позиция, у которой надо вернуть предыдущую позицию
     * @return Позицию перед элементом, расположенного в позиции p в случае нахождения его в списке
     * @throws RuntimeException если позиция некорректна
     */
    public Position Previous(Position p) {
        // Проверяем корректность позиции
        if (p.position <= 0 || p.position > last) {
            throw new RuntimeException("Invalid position");
        }

        // Возвращаем элемент на предыдущей позиции
        return new Position(p.position - 1);
    }


    /**
     * Метод, очищающий список.
     * <p>
     * Проходим в цикле по всем элементам и присваиваем им null.
     * last приравниваем к нулю.
     */
    public Position MakeNull() {
        // Обнуляем размер списка.
        last = 0;

        return new Position(last);
    }


    /**
     * Метод, возвращающий первую позицию списка.
     * <p>
     *
     * @return Всегда возвращаем 0
     */
    public Position First() {
        return new Position(0);
    }


    /**
     * Метод, печатающий содержимое списка.
     * <hr>
     * Если список пуст, выводится сообщение об этом.
     * В противном случае, у каждого элемента в цикле вызываем метод Print().
     */
    public void PrintList() {
        if (last == 0) {
            System.out.println("Список пуст");
            return;
        }

        // Печатаем все элементы списка
        for (int i = 0; i < last; i++) {
            elements[i].Print();
        }
    }
}
