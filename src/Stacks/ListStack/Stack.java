package Stacks.ListStack;

import ListElement.ListElement;

/**
 * Класс Stack представляет собой стек, реализованный на основе связного списка.
 * Каждый элемент стека представлен узлом, и операции выполняются с верхним элементом.
 */
public class Stack {
    private Node head; // Указатель на верхний элемент стека

    /**
     * Конструктор Stack.
     * Инициализирует стек как пустой.
     */
    public Stack() {
        this.head = null; // Стек инициализируется как пустой
    }

    /**
     * Метод для добавления элемента в стек.
     * Новый элемент добавляется в начало списка (верх стека).
     *
     * @param x элемент, который будет добавлен в стек
     */
    public void Push(ListElement x) {
        head = new Node(x, head); // Новый элемент становится верхним элементом
    }

    /**
     * Метод для удаления и возврата верхнего элемента стека.
     * Стек изменяется, удаляя верхний элемент.
     *
     * @return верхний элемент стека
     */
    public ListElement Pop() {
        ListElement data = head.data; // Сохраняем данные верхнего элемента
        head = head.next; // Перемещаем указатель на следующий элемент (теперь он верхний)
        return data; // Возвращаем данные удаленного элемента
    }

    /**
     * Метод для получения верхнего элемента стека, не удаляя его.
     *
     * @return верхний элемент стека
     */
    public ListElement Top() {
        return head.data; // Возвращаем данные верхнего элемента
    }

    /**
     * Метод, проверяющий, является ли стек полным.
     * Для списка не существует ограничения по количеству элементов, поэтому всегда возвращаем false.
     *
     * @return всегда false (стек не может быть полным, так как использует динамическую память)
     */
    public boolean Full() {
        return false; // Стек не может быть полным
    }

    /**
     * Метод, проверяющий, пуст ли стек.
     *
     * @return true, если стек пуст, иначе false
     */
    public boolean Empty() {
        return head == null; // Стек пуст, если указатель на верхний элемент равен null
    }

    /**
     * Метод для очистки стека.
     * Стек становится пустым, устанавливая указатель на верхний элемент в null.
     */
    public void MakeNull() {
        head = null; // Очищаем стек, удаляя все элементы
    }
}
