package Stacks.ArrayStack;

import ListElement.ListElement;

/**
 * Класс Stack реализует стек с использованием массива фиксированного размера.
 * Стек предоставляет операции добавления, удаления, просмотра верхнего элемента,
 * а также проверки состояния стека (пустой или полный).
 */
public class Stack {
    private ListElement[] stack; // Массив для хранения элементов стека
    private static final int SIZE = 100; // Максимальный размер стека
    private int top; // Индекс верхнего элемента в стеке

    /**
     * Конструктор Stack.
     * Инициализирует массив для хранения элементов и устанавливает начальное состояние стека как пустое.
     */
    public Stack() {
        stack = new ListElement[SIZE]; // Инициализация массива для хранения элементов
        top = -1; // Установка указателя на пустой стек
    }

    /**
     * Метод Push добавляет новый элемент в стек.
     *
     * @param x элемент, который нужно добавить в стек
     */
    public void Push(ListElement x) {
        stack[++top] = x; // Увеличиваем указатель и добавляем элемент в массив
    }

    /**
     * Метод Pop удаляет и возвращает верхний элемент стека.
     *
     * @return элемент, находящийся на вершине стека
     */
    public ListElement Pop() {
        return stack[top--]; // Возвращаем элемент на вершине стека и уменьшаем указатель
    }

    /**
     * Метод Top возвращает верхний элемент стека без его удаления.
     *
     * @return элемент, находящийся на вершине стека
     */
    public ListElement Top() {
        return stack[top]; // Возвращаем верхний элемент без изменения указателя
    }

    /**
     * Метод MakeNull очищает стек.
     * Устанавливает стек в пустое состояние.
     */
    public void MakeNull() {
        top = -1; // Сбрасываем указатель, что означает пустой стек
    }

    /**
     * Метод Full проверяет, заполнен ли стек.
     *
     * @return true, если стек заполнен, иначе false
     */
    public boolean Full() {
        return top == SIZE - 1; // Проверяем, достиг ли указатель максимального значения
    }

    /**
     * Метод Empty проверяет, пуст ли стек.
     *
     * @return true, если стек пуст, иначе false
     */
    public boolean Empty() {
        return top == -1; // Проверяем, равен ли указатель -1, что означает пустой стек
    }
}
