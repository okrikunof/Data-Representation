package Queues.ArrayQueue;

import ListElement.*;

/**
 * Класс Queue представляет собой очередь, реализованную на основе массива.
 * Элементы добавляются в конец очереди (tail) и удаляются из начала очереди (head).
 */
public class Queue {
    private ListElement[] queue; // Массив для хранения элементов очереди
    private final int SIZE = 100; // Максимальный размер очереди
    private int head; // Индекс первого элемента в очереди
    private int tail; // Индекс последнего элемента в очереди

    /**
     * Конструктор Queue.
     * Инициализирует очередь как пустую (head и tail устанавливаются в -1).
     */
    public Queue() {
        queue = new ListElement[SIZE]; // Создаем массив для хранения элементов
        head = -1; // Устанавливаем начало очереди в -1, означающее пустую очередь
        tail = -1; // Устанавливаем конец очереди в -1, означающее пустую очередь
    }

    /**
     * Метод, проверяющий, является ли очередь полной.
     * Очередь считается полной, если хвост указывает на последний элемент массива.
     *
     * @return true, если очередь полна, иначе false
     */
    public boolean Full() {
        return tail == SIZE - 1; // Очередь полна, если tail равен последнему индексу массива
    }

    /**
     * Метод, проверяющий, является ли очередь пустой.
     * Очередь считается пустой, если head равен -1.
     *
     * @return true, если очередь пуста, иначе false
     */
    public boolean Empty() {
        return head == -1; // Очередь пуста, если head равен -1
    }

    /**
     * Метод для добавления элемента в очередь.
     * Элемент добавляется в конец очереди (в позицию tail).
     *
     * @param x элемент, который будет добавлен в очередь
     */
    public void Enqueue(ListElement x) {
        if (Empty()) { // Если очередь пуста
            head = tail = 0; // Устанавливаем оба указателя на 0 (первый элемент)
            queue[tail] = x; // Добавляем элемент в конец очереди
        } else { // Если очередь не пуста
            tail++; // Увеличиваем указатель на конец очереди
            queue[tail] = x; // Добавляем элемент в новый конец очереди
        }
    }

    /**
     * Метод для удаления и возврата первого элемента из очереди.
     * Удаление происходит с начала очереди (позиции head).
     *
     * @return первый элемент очереди
     */
    public ListElement Dequeue() {
        if (head == tail) { // Если в очереди только один элемент
            ListElement data = queue[head]; // Сохраняем первый элемент
            head = tail = -1; // Очистка очереди
            return data; // Возвращаем удаленный элемент
        } else { // Если в очереди несколько элементов
            ListElement data = queue[head]; // Сохраняем первый элемент
            head++; // Перемещаем указатель на начало очереди
            return data; // Возвращаем удаленный элемент
        }
    }

    /**
     * Метод для очистки очереди.
     * После вызова этого метода очередь становится пустой.
     */
    public void MakeNull() {
        head = tail = -1; // Устанавливаем указатели на -1, чтобы очередь стала пустой
    }

    /**
     * Метод для получения первого элемента очереди, не удаляя его.
     *
     * @return первый элемент очереди
     */
    public ListElement Front() {
        ListElement front = queue[head]; // Возвращаем элемент, находящийся в начале очереди
        return front; // Возвращаем первый элемент
    }
}
