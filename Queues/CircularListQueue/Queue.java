package Queues.CircularListQueue;

import ListElement.*;

/**
 * Класс Queue представляет собой циклическую очередь, реализованную с использованием циклически связного списка.
 */
public class Queue {
    private Node tail; // Указатель на последний элемент очереди

    /**
     * Конструктор Queue.
     * Инициализирует очередь как пустую (tail = null).
     */
    public Queue() {
        this.tail = null;
    }

    /**
     * Метод для добавления элемента в очередь.
     * Если очередь пуста, создается первый узел, который указывает сам на себя.
     * Если очередь не пуста, добавляется новый элемент в конец, и tail обновляется.
     *
     * @param x элемент для добавления в очередь
     */
    public void Enqueue(ListElement x) {
        // 1. Если список пустой
        if (tail == null) {
            tail = new Node(x, null); // Создаем новый узел, который указывает на себя
            tail.next = tail; // Устанавливаем циклическую ссылку
            return;
        }

        // 2. Оставшиеся случаи
        tail.next = new Node(x, tail.next); // Добавляем новый узел в конец очереди
        tail = tail.next; // Обновляем указатель на последний узел
    }

    /**
     * Метод для извлечения элемента из очереди.
     * Если в очереди один элемент, удаляется он.
     * Если элементов больше одного, извлекается элемент из начала очереди, и ссылку на tail обновляют.
     *
     * @return элемент, извлеченный из очереди
     */
    public ListElement Dequeue() {
        ListElement data = tail.next.data; // Сохраняем данные первого элемента

        // 1. Когда в списке один элемент
        if (tail.next == tail) {
            tail = null; // Если только один элемент, очищаем очередь
            return data; // Возвращаем данные
        }

        // 2. Оставшиеся случаи
        tail.next = tail.next.next; // Убираем ссылку на первый элемент и обновляем начало очереди
        return data; // Возвращаем данные первого элемента
    }

    /**
     * Метод, возвращающий первый элемент в очереди.
     *
     * @return данные первого элемента очереди
     */
    public ListElement Front() {
        return tail.next.data; // Возвращаем данные первого элемента
    }

    /**
     * Метод, проверяющий, полна ли очередь.
     * В этой реализации очередь не может быть "полной", так как она использует циклический список с динамическим размером.
     *
     * @return всегда false, так как очередь не имеет ограничений по размеру
     */
    public boolean Full() {
        return false; // Очередь не ограничена размером
    }

    /**
     * Метод, проверяющий, пуста ли очередь.
     *
     * @return true, если очередь пуста; иначе false
     */
    public boolean Empty() {
        return tail == null; // Очередь пуста, если указатель на последний элемент равен null
    }

    /**
     * Метод для очистки очереди, обнуляя указатель на последний элемент.
     */
    public void MakeNull() {
        tail = null; // Очищаем очередь, сбрасывая указатель на последний элемент
    }
}
